From d7b79f3ec2903ab2d35072c0e802522e9c36be39 Mon Sep 17 00:00:00 2001
From: eroen <eroen@occam.eroen.eu>
Date: Sat, 20 Oct 2012 00:37:44 +0200
Subject: [PATCH 2/4] tell various components about non-magic paths

---
 CMakeLists.txt                | 5 +++++
 depends/lua/include/luaconf.h | 4 ++--
 library/Core.cpp              | 6 +++---
 plugins/Dfusion/dfusion.cpp   | 2 +-
 plugins/ruby/ruby.cpp         | 4 ++--
 plugins/zone.cpp              | 3 ---
 6 files changed, 13 insertions(+), 11 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index a8eb1f4..3f15fb1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -83,6 +83,7 @@ ELSE()
     SET(DFHACK_LIBRARY_DESTINATION .)
     SET(DFHACK_EGGY_DESTINATION .)
 ENDIF()
+add_definitions(-DDFHACK_LIBRARY_DESTINATION="${DFHACK_LIBRARY_DESTINATION}")
 # external tools will be installed here:
 if(NOT DEFINED DFHACK_BINARY_DESTINATION)
     SET(DFHACK_BINARY_DESTINATION .)
@@ -91,6 +92,7 @@ endif()
 if(NOT DEFINED DFHACK_DATA_DESTINATION)
     SET(DFHACK_DATA_DESTINATION hack)
 endif()
+add_definitions(-DDFHACK_DATA_DESTINATION="${DFHACK_DATA_DESTINATION}")
 # plugin libs go here:
 if(NOT DEFINED DFHACK_PLUGIN_DESTINATION)
     SET(DFHACK_PLUGIN_DESTINATION "${DFHACK_DATA_DESTINATION}/plugins")
@@ -103,12 +105,15 @@ endif()
 if(NOT DEFINED DFHACK_LUA_DESTINATION)
     SET(DFHACK_LUA_DESTINATION "${DFHACK_DATA_DESTINATION}/lua")
 endif()
+add_definitions(-DDFHACK_LUA_DESTINATION="${DFHACK_LUA_DESTINATION}")
 if(NOT DEFINED DFHACK_RUBY_DESTINATION)
     SET(DFHACK_RUBY_DESTINATION "${DFHACK_DATA_DESTINATION}/ruby")
 endif()
+add_definitions(-DDFHACK_RUBY_DESTINATION="${DFHACK_RUBY_DESTINATION}")
 if(NOT DEFINED DFHACK_DFUSION_DESTINATION)
     SET(DFHACK_DFUSION_DESTINATION "${DFHACK_DATA_DESTINATION}/dfusion")
 endif()
+add_definitions(-DDFHACK_DFUSION_DESTINATION="${DFHACK_DFUSION_DESTINATION}")
 # the windows .lib file goes here:
 if(NOT DEFINED DFHACK_DEVLIB_DESTINATION)
     SET(DFHACK_DEVLIB_DESTINATION "${DFHACK_DATA_DESTINATION}")
diff --git a/depends/lua/include/luaconf.h b/depends/lua/include/luaconf.h
index 766752f..69cf425 100644
--- a/depends/lua/include/luaconf.h
+++ b/depends/lua/include/luaconf.h
@@ -98,8 +98,8 @@
 
 #else			/* }{ */
 
-#define LUA_LDIR	"./hack/lua/"
-#define LUA_CDIR	"./hack/"
+#define LUA_LDIR	DFHACK_LUA_DESTINATION "/"
+#define LUA_CDIR	DFHACK_DATA_DESTINATION "/"
 #define LUA_PATH_DEFAULT  \
 		LUA_LDIR"?.lua;"  LUA_LDIR"?/init.lua;" "./?.lua"
 #define LUA_CPATH_DEFAULT \
diff --git a/library/Core.cpp b/library/Core.cpp
index 1015194..d02c234 100644
--- a/library/Core.cpp
+++ b/library/Core.cpp
@@ -316,7 +316,7 @@ static command_result runRubyScript(color_ostream &out, PluginManager *plug_mgr,
         rbcmd += "'" + args[i] + "', ";
     rbcmd += "]\n";
 
-    rbcmd += "load './hack/scripts/" + name + ".rb'";
+    rbcmd += "load '" DFHACK_DATA_DESTINATION "/scripts/" + name + ".rb'";
 
     return plug_mgr->eval_ruby(out, rbcmd.c_str());
 }
@@ -815,7 +815,7 @@ void Core::fatal (std::string output, bool deactivate)
 std::string Core::getHackPath()
 {
 #ifdef LINUX_BUILD
-    return p->getPath() + "/hack/";
+    return DFHACK_DATA_DESTINATION "/";
 #else
     return p->getPath() + "\\hack\\";
 #endif
@@ -830,7 +830,7 @@ bool Core::Init()
 
     // find out what we are...
     #ifdef LINUX_BUILD
-        const char * path = "hack/symbols.xml";
+        const char * path = DFHACK_DATA_DESTINATION "/symbols.xml";
     #else
         const char * path = "hack\\symbols.xml";
     #endif
diff --git a/plugins/Dfusion/dfusion.cpp b/plugins/Dfusion/dfusion.cpp
index 78c3fa8..ae17648 100644
--- a/plugins/Dfusion/dfusion.cpp
+++ b/plugins/Dfusion/dfusion.cpp
@@ -170,7 +170,7 @@ void RunDfusion(color_ostream &out, std::vector <std::string> &parameters)
 	mymutex->lock();
 	lua::state s=lua::glua::Get();
 	try{
-		s.loadfile("dfusion/init.lua"); //load script
+		s.loadfile( DFHACK_DFUSION_DESTINATION "/init.lua"); //load script
 		for(size_t i=0;i<parameters.size();i++)
 				s.push(parameters[i]);
         Lua::SafeCall(out, s, parameters.size(),0);
diff --git a/plugins/ruby/ruby.cpp b/plugins/ruby/ruby.cpp
index 7bd6d13..3593f84 100644
--- a/plugins/ruby/ruby.cpp
+++ b/plugins/ruby/ruby.cpp
@@ -278,7 +278,7 @@ static int df_loadruby(void)
 #elif defined(__APPLE__)
         "/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/libruby.1.dylib";
 #else
-        "hack/libruby.so";
+        DFHACK_LIBRARY_DESTINATION "/libruby.so";
 #endif
 
     libruby_handle = OpenPlugin(libpath);
@@ -381,7 +381,7 @@ static void df_rubythread(void *p)
 
     // load the default ruby-level definitions in the background
     state=0;
-    rb_eval_string_protect("require './hack/ruby/ruby'", &state);
+    rb_eval_string_protect("require '" DFHACK_RUBY_DESTINATION "/ruby'", &state);
     if (state)
         dump_rb_error();
 
diff --git a/plugins/zone.cpp b/plugins/zone.cpp
index c496f49..627a38b 100644
--- a/plugins/zone.cpp
+++ b/plugins/zone.cpp
@@ -3110,9 +3110,6 @@ command_result df_autobutcher(color_ostream &out, vector <string> & parameters)
     if(list_export)
     {
         string run = "dfhack-run autobutcher ";
-#ifdef LINUX_BUILD
-        run = "./dfhack-run autobutcher ";
-#endif
         // force creation of config
         out << run << "start" << endl;
 
-- 
1.7.12.4

